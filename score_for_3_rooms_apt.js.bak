
words_scoring = {
    "@פלורנטין": 10,
    "@לוינסקי": 5,
	"@כרם התימנים": 15,
	"~כרם": 15,
    "~צפון הישן": -25,
    "~צפון השקט": -25,
    "@צפון העיר": -25,
    "@כיכר המדינה": -25,
    "@עזריאלי": -25,
    "@בבלי": -25,
    "@בזל": -25,
    "@באזל": -25,
    "@פארק הירקון": -25,
    "~אוניברסיטה": -25,
    "משה שרת": -25,
    "שותף": -5,
    "שותפה": -7,
    "שותפות": -8,
    "שותפים": 5,
    "סאבלט": -20,
    "סבלט": -20,
    "מסבלט": -20,
    "מסבלטת": -20,
    "@ז'בוטינסקי": -20,
    "@ארלוזרוב": -2,
    "@דיזינגוף": 4,
    "@בארי": -20,
    "מחפש": -3,
    "מחפשת": -3,
    "מחפשים": -3,
    "שמחפשים": -3,
    "מחליף": -20,
    "מחליפה": -20,
    "סטודיו": -20,
    "גלריה": -20,
    "דירת גג": 4,
    "חדר בדירת שותפים": -20,
    "חדר בדירה": -20,
    "מתפנה חדר": -20,
    "@בן גוריון": 2,
    "3 חדרים": 25,
    "שלושה חדרים": 25,
    "שלוש חדרים": 25,
    "3 חד'": 25,
    "2 חדרים": -35,
    "שני חדרים": -35,
    "2 חד'": -35,
 /*   "4 חדרים": -35,
    "ארבעה חדרים": -35,
    "ארבע חדרים": -35,
    "4 חד'": -35,*/
    "@שוק הכרמל": 5,
    "@רוטשילד": 7,
    "@נווה צדק": 5,
    "דירה להחלפה": -20,
    "@כיכר רבין": 4,
    "@כיכר הבימה": 8,
    "~סנטר": 8,
    "מתפנה חדר": -20,
    "מתאימה ליחיד": -30,
    "מתאימה ליחיד או לזוג": -30,
    "לבנות בלבד": -35,
    "לא מתיווך": 5,
    "ללא תיווך": 5,
    "@תיווך": -10,
    "@גבעתיים": -25,
    "~נמל": -35
};

var _keys = Object.keys(words_scoring);
var scoring_dict = {};
for (let ki = 0; ki < _keys.length; ki++) {
	let k = _keys[ki];
    let cur_p = undefined;
    
    let f = (keys, s, score) => {
    	keys.push(s);
    	words_scoring[s] = score;
    }
    
    if (k[0] == '@') {
        let score = words_scoring[k];
    	f(_keys, 'מ' + k.substring(1), score);
    	f(_keys, 'ב' + k.substring(1), score);
    	f(_keys, 'ו' + k.substring(1), score);
    	f(_keys, 'ומ' + k.substring(1), score);
    	f(_keys, 'ל' + k.substring(1), score);
    	k = k.substring(1);
        words_scoring[k] = score;
    }
    
    if (k[0] == '~') {
        let score = words_scoring[k];
    	f(_keys, 'מה' + k.substring(1), score);
    	f(_keys, 'ב' + k.substring(1), score);
    	f(_keys, 'וה' + k.substring(1), score);
    	f(_keys, 'ומה' + k.substring(1), score);
    	f(_keys, 'ל' + k.substring(1), score);
    	k = k.substring(1);
        words_scoring[k] = score;
    }
    
    let ws = k.split(" ");
    
    for(let i = 0; i < ws.length; i++) {
        let cur = cur_p;
        let w = ws[i];
        if (!cur_p) cur = scoring_dict;
        if (!cur[w]) cur[w] = {p:cur};
        if (i == ws.length - 1)
            cur[w].score = words_scoring[k];
        cur_p = cur[w];
    }
}
console.log(scoring_dict);

function score_words(words, cur_word_i, scoring_seq) {
	var w = words[cur_word_i];
	var sq = scoring_seq[w];
	var res;

	if (w == undefined)
		return undefined;

	if (sq == undefined)
		return undefined;

	res = score_words(words, cur_word_i+1, sq);
	if (res == undefined && !sq.already_used) {
		res = { score: sq.score ? sq.score : 0, len: 0 };
        sq.already_used = true;
    }
    else if (sq.already_used)
        return undefined;
	else
		res.len++;

	return res;
}

function copy_scoring_dict(sq)  {
    d = {}
    Object.keys(sq).forEach(k => {
        if (k != 'p' and typeof(k) == 'object'):
            d[k] = copy_scoring_dict(sq[k])
    });
    return d
}

function score_text(text) {
    let score = 0;

    //text = text.replace(/,|\\.|\\(|\\)|!|?|\\/|\n|-|\\+/g, "");
    text = text.replace(/,/g, " ");
    text = text.replace(/\./g, " ");
    text = text.replace(/\(/g, " ");
    text = text.replace(/\)/g, " ");
    text = text.replace(/!/g, " ");
    text = text.replace(/\?/g, " ");
    text = text.replace(/\//g, " ");
    text = text.replace(/\n/g, " ");
    text = text.replace(/-/g, " ");
    text = text.replace(/\+/g, " ");
    text = text.replace(/\*/g, " ");

    text = text.replace(/ +/g, " ");
    let words = text.split(" ");
	// need to filter here empty strings
    words.push("dummydummydummy");
    var temp_dict = copy_scoring_dict(scoring_dict);

    var cur_e = undefined;
    for (let i = 0; i < words.length; i++) {
        /*let w = words[i];
        let go_back = 0;
        console.log(w);
        let entry;
        if (cur_e) entry = cur_e;
        else entry = scoring_dict;			
        console.log(entry);

        // This here needs to be solved. It causes problem with giving the right scoring when a phrase is aborted.
        if (!entry) {
            if (cur_e && cur_e.score)
                score += cur_e.score;
            // Added while drunk need to reconsider 
            else if (cur_e) {
                while (cur_e.p) {
                    cur_e = cur_e.p;
                    if (cur_e && cur_e.score) {
                        score += cur_e.score;
                        break;
                    }
                    else {
                        go_back++;
                    }
                }
                i -= go_back;
                //w = words[i];
                continue;
            }
            // ====================================
            cur_e = undefined;
            entry = scoring_dict[w];
            if (!entry)
                continue;
        }
        let keys = Object.keys(entry);
        if (keys.length == 1 && keys[0] == "score") {
            score += entry.score;
            cur_e = undefined;
        }
        else {
            cur_e = entry;
        }*/
		let res = score_words(words, i, temp_dict);
		if (res != undefined) {
			score += res.score;
			i += res.len;
		}
    }
    return score;
}

function score_post(post) {
	var total = 0;
	
    total += score_text(post.title);
    total += score_text(post.content);
    
    return total;
}
